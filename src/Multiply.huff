
/** 
 *  MULTIPLY HUFF EXERCISE
 *
 *  When writing solidity, we most times have to perform some mathematical operations like multiplication etc
 *  
 *  The task is to write within the `MAIN` macro below, a function named `multiply` that takes in 2 uint256s, and returns their product. Be sure to revert on overflow
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function multiply(uint256, uint256) payable returns(uint256)


#define macro MAIN() = takes(0) returns(0) {
    // Get the function selector
    0x00 calldataload 0xE0 shr          // [func_sig]

    __FUNC_SIG(add1) eq multiply jumpi // jump to add1 if func signature matches

    // 0x00 dup1 revert // Revert if no match is found.

    multiply:
        MULTIPLY()
}

#define macro MULTIPLY() = takes(0) returns(0) {
    0x04 calldataload     // [arg1]
    0x24 calldataload     // [arg2, arg1]
    mul                   // [res]

    // check if first argument is zero
    0x04 calldataload     // [arg1, res]
    iszero                // [arg1 == 0, res]
    nooverflow jumpi      // [res]

    // check if second argument is zero
    0x24 calldataload     // [arg2, res]
    iszero                // [arg2 == 0, res]
    nooverflow jumpi      // [res]

    dup1                  // [res, res]

    // if res < arg1 revert
    0x04 calldataload    // [arg1, res, res]
    swap1                // [res, arg1, res]
    lt                   // [res < arg2, res]
    overflow jumpi       // [res]

    dup1                 // [res, res]

    // if res < arg2 revert
    0x24 calldataload    // [arg2, res, res]
    swap1                // [res, arg2, res]
    lt                   // [res < arg2, res]
    overflow jumpi       // [res]

    0x00 mstore           // place the result in memory
    0x20 0x00 return      // return the result

    overflow:
        0x00 dup1 revert

    nooverflow:
        0x00 mstore           // place the result in memory
        0x20 0x00 return      // return the result
}
